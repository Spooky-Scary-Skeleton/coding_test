# ----------------------------------
# #[내 풀이] 못품
# ----------------------------------

# ----------------------------------
# #[내 풀이] 1110 못품
# ----------------------------------

# ----------------------------------
# #[내 풀이] 210312 못품
# ----------------------------------

# ----------------------------------
# #[내 풀이] 210330 풀었지만 시간이 너무 오래걸림(1시간)
# ----------------------------------

n, m  = map(int, input().split())

#일단 붙어서 들어오는 숫자 문자열을 2차원 배열로 변환시키지 못함. 

mold = [[0] * m for i in range(n)]

for i in range(n):
  line = input()
  for j in range(m):    
    mold[i][j] = int(line[j])

#DFS 최대한 깊게 탐색
dx = [0, 0, 1, -1]
dy = [-1, 1, 0, 0]

#방문기록
visited = [[False] * m for i in range(n)]

def dfs(mold, x, y, visited):
  for i in range(4):
      nx = x + dx[i]
      ny = y + dy[i]
      if nx >= 0 and nx < n and ny >= 0 and ny < m and mold[nx][ny] == 0 and visited[nx][ny] == False:
        visited[nx][ny] = True
        dfs(mold, nx, ny, visited)

#아이스크림 갯수
count = 0

#아이스크림 탐색
for x in range(n):
  for y in range(m):
    if mold[x][y] == 0 and visited[x][y] ==False:
      count += 1
      visited[x][y] = True
      dfs(mold, x, y, visited)

print(count)

----------------------------------
#[교재풀이]
----------------------------------
n, m = map(int, input().split())

#2차원 리스트의 맵정보 입력받기
graph =[]
for i in range(n):
  graph.append(list(map(int,input())))

#DFS로 특정한 노드를 방문한뒤에 연결된 모든 노드들도 방문

def dfs(x, y):
  #주어진 범위를 벗어나는 경우에는 즉시 종료
  if x<= -1 or x >= n or y <= -1 or y >= m:
    return False
  #현재 노드를 아직 방문하지 않았다면
  if graph[x][y] == 0:
    #해당 노드 방문 처리
    graph[x][y] = 1
    #상하좌우의 위치도 모두 재귀적으로 호출
    dfs(x-1, y)
    dfs(x, y-1)
    dfs(x+1, y)
    dfs(x, y+1)
    return True
  return False

#모든 노드(위치)에 대하여 음료수 채우기
result = 0
for i in range(n):
  for j in range(m):
    #현재 위치에서 DFS 수행
    if dfs(i, j) == True:
      result += 1

print(result)

----------------------------------
#[내가 부족한점]
----------------------------------
"""
아직 DFS의 개념이 익숙하지가 않다. 
문자열(STR)도 iterable이라는 것을 생각을 못했음. 
"""

----------------------------------
#[내가 부족한점] 1110
----------------------------------
"""
map이 정확히 무엇인지 까먹어서 다시 복습함. 
핵심아이디어는 떠올렸으나 구현을 못함. 
"""
----------------------------------
#[내가 부족한점] 210312
----------------------------------
"""
일단 아이스크림틀 정보를 받을때 문자열도 이터러블이니까 list(map(int, input())) 할수있는걸 생각못함. 
재귀적으로 dfs를 호출하면 된다는 생각을 잘 못함. 
"""
"""
문제 입력
15 14
00000111100000
11111101111110
11011101101110
11011101100000
11011111111111
11011111111100
11000000011111
01111111111111
00000000011111
01111111111000
00011111111000
00000001111000
11111111110011
11100011111111
11100011111111
"""

----------------------------------
#[내가 부족한점] 210330
----------------------------------
"""
1. 입출력 받을때 단순하게 list(map(int, input()))하면 되는걸 생각을 못함. 
2. 풀기는 했지만 시간이 너무 오래결렸고 중간에 재귀적으로 함수를 호출할때 x, y = nx, ny 라고 잘못 생각한 부분이 있음. 
3. 교재 풀이가 훨씬더 간단함. 
"""
